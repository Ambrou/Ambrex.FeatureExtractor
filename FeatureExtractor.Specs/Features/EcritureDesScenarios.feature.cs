// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.1022
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FeatureExtractor.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EcritureDesScenariosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EcritureDesScenarios.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EcritureDesScenarios", "In order to get all scenarios in files\nAs a lazy developer\nI want to the scenario" +
                    "s written in a file", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "EcritureDesScenarios")))
            {
                FeatureExtractor.Specs.Features.EcritureDesScenariosFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ecriture d\'un scénario")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EcritureDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ecriture")]
        public virtual void EcritureDUnScenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ecriture d\'un scénario", new string[] {
                        "ecriture"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table1.AddRow(new string[] {
                        "Changement d’une tablée",
                        "Soit un materiel\nEt ou la configuration definissant la table 7\nLorsque j\'appelle " +
                            "le mot clef changeTable 7\nAlors le script retourne a volonte OK"});
            table1.AddRow(new string[] {
                        "Changement d’une tablée",
                        "Soit un materiel\nEt ou la configuration definissant la table 7\nLorsque j\'appelle " +
                            "le mot clef changeTable 7\nAlors le script retourne a volonte OK24"});
#line 8
 testRunner.Given("l\'exigence transformée ESD_044 contenant les scénario:", ((string)(null)), table1, "Given ");
#line 12
     testRunner.And("le contexte \"Soit un interpreteur de script\\nEt un agenda\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
  testRunner.And("sa fonctionnalité est \"Changement de table\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.When("je génére les fichiers scénarios temporaires", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ligne"});
            table2.AddRow(new string[] {
                        "\"# language: fr\""});
            table2.AddRow(new string[] {
                        "\"# encoding: Windows-1252\""});
            table2.AddRow(new string[] {
                        "\"@ESD_044\""});
            table2.AddRow(new string[] {
                        "\"Fonctionnalité: Changement de table\""});
            table2.AddRow(new string[] {
                        "\"\""});
            table2.AddRow(new string[] {
                        "\"  Contexte:\""});
            table2.AddRow(new string[] {
                        "\"    Soit un interpreteur de script\""});
            table2.AddRow(new string[] {
                        "\"      Et un agenda"});
            table2.AddRow(new string[] {
                        "\"\""});
            table2.AddRow(new string[] {
                        "\"  @clean\""});
            table2.AddRow(new string[] {
                        "\"  Scénario: Changement d’une tablée\""});
            table2.AddRow(new string[] {
                        "\"    Soit un materiel\""});
            table2.AddRow(new string[] {
                        "\"      Et ou la configuration definissant la table 7\""});
            table2.AddRow(new string[] {
                        "\"    Lorsque j\'appelle le mot clef changeTable 7\""});
            table2.AddRow(new string[] {
                        "\"    Alors le script retourne a volonte OK\""});
            table2.AddRow(new string[] {
                        "\"\""});
            table2.AddRow(new string[] {
                        "\"  @clean\""});
            table2.AddRow(new string[] {
                        "\"  Scénario: Changement d’une tablée\""});
            table2.AddRow(new string[] {
                        "\"    Soit un materiel\""});
            table2.AddRow(new string[] {
                        "\"      Et ou la configuration definissant la table 7\""});
            table2.AddRow(new string[] {
                        "\"    Lorsque j\'appelle le mot clef changeTable 7\""});
            table2.AddRow(new string[] {
                        "\"    Alors le script retourne a volonte OK24\""});
#line 15
 testRunner.Then("j\'ai le fichier contient 044.feature contient les lignes:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ecriture d\'un plan de scénario")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EcritureDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ecriture")]
        public virtual void EcritureDUnPlanDeScenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ecriture d\'un plan de scénario", new string[] {
                        "ecriture"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table3.AddRow(new string[] {
                        "Définition des statuts bloquants l’acquisition",
                        @"Soit un generateur type
Et aucun statut bloquant pour l'acquisition
Lorsque j'appelle le mot clef setAcquiBlockingXGStatus parametres
Alors les statuts st sont bloquants pour l'acquisition
Et le script retourne TCL_OK
Exemples:
| type | parametres | st |
| Philips avec le protocole SDL | st1Value 32 | st1Value 32 |"});
#line 43
 testRunner.Given("l\'exigence transformée ESD_044 contenant les scénario:", ((string)(null)), table3, "Given ");
#line 46
     testRunner.And("le contexte \"Soit un interpreteur de script\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.When("je génére les fichiers scénarios temporaires", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ligne"});
            table4.AddRow(new string[] {
                        "\"# language: fr\""});
            table4.AddRow(new string[] {
                        "\"# encoding: Windows-1252\""});
            table4.AddRow(new string[] {
                        "\"@ESD_044\""});
            table4.AddRow(new string[] {
                        "\"Fonctionnalité: \""});
            table4.AddRow(new string[] {
                        "\"\""});
            table4.AddRow(new string[] {
                        "\"  Contexte:\""});
            table4.AddRow(new string[] {
                        "\"    Soit un interpreteur de script\""});
            table4.AddRow(new string[] {
                        "\"\""});
            table4.AddRow(new string[] {
                        "\"  @clean\""});
            table4.AddRow(new string[] {
                        "\"  Plan du scénario: Définition des statuts bloquants l’acquisition"});
            table4.AddRow(new string[] {
                        "\"    Soit un generateur type\""});
            table4.AddRow(new string[] {
                        "\"      Et aucun statut bloquant pour l\'acquisition\""});
            table4.AddRow(new string[] {
                        "\"    Lorsque j\'appelle le mot clef setAcquiBlockingXGStatus parametres\""});
            table4.AddRow(new string[] {
                        "\"    Alors les statuts st sont bloquants pour l\'acquisition\""});
            table4.AddRow(new string[] {
                        "\"      Et le script retourne TCL_OK\""});
            table4.AddRow(new string[] {
                        "\"  Exemples:\""});
            table4.AddRow(new string[] {
                        "\"        | type | parametres | st |\""});
            table4.AddRow(new string[] {
                        "\"        | Philips avec le protocole SDL | st1Value 32 | st1Value 32 |\""});
#line 48
 testRunner.Then("j\'ai le fichier contient 044.feature contient les lignes:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ecriture d\'un scénario sans contexte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EcritureDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ecriture")]
        public virtual void EcritureDUnScenarioSansContexte()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ecriture d\'un scénario sans contexte", new string[] {
                        "ecriture"});
#line 71
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table5.AddRow(new string[] {
                        "Changement d’une tablée",
                        "Soit un materiel\nEt ou la configuration definissant la table 7\nLorsque j\'appelle " +
                            "le mot clef changeTable 7\nAlors le script retourne a volonte OK"});
#line 72
 testRunner.Given("l\'exigence transformée ESD_144 contenant les scénario:", ((string)(null)), table5, "Given ");
#line 75
     testRunner.And("le contexte \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
  testRunner.And("sa fonctionnalité est \"Changement de table\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.When("je génére les fichiers scénarios temporaires", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ligne"});
            table6.AddRow(new string[] {
                        "\"# language: fr\""});
            table6.AddRow(new string[] {
                        "\"# encoding: Windows-1252\""});
            table6.AddRow(new string[] {
                        "\"@ESD_144\""});
            table6.AddRow(new string[] {
                        "\"Fonctionnalité: Changement de table\""});
            table6.AddRow(new string[] {
                        "\"\""});
            table6.AddRow(new string[] {
                        "\"  @clean\""});
            table6.AddRow(new string[] {
                        "\"  Scénario: Changement d’une tablée\""});
            table6.AddRow(new string[] {
                        "\"    Soit un materiel\""});
            table6.AddRow(new string[] {
                        "\"      Et ou la configuration definissant la table 7\""});
            table6.AddRow(new string[] {
                        "\"    Lorsque j\'appelle le mot clef changeTable 7\""});
            table6.AddRow(new string[] {
                        "\"    Alors le script retourne a volonte OK\""});
#line 78
 testRunner.Then("j\'ai le fichier contient 144.feature contient les lignes:", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

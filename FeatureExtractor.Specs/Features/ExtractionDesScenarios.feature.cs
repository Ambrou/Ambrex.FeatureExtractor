// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FeatureExtractor.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ExtractionDesScenariosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExtractionDesScenarios.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ExtractionDesScenarios", "  In order to avoid silly mistakes\r\n  As a math idiot\r\n  I want to be told the su" +
                    "m of two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ExtractionDesScenarios")))
            {
                FeatureExtractor.Specs.Features.ExtractionDesScenariosFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction de scénario simple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("core")]
        public virtual void ExtractionDeScenarioSimple()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction de scénario simple", new string[] {
                        "core"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "TEXTE"});
            table1.AddRow(new string[] {
                        "ESD_044",
                        "\"  Contexte: Étant donné un interpréteur de script Scénario: Changement de table " +
                            "Étant donné un matériel Et la configuration définissant la table 7 Lorsque j\'app" +
                            "elle le mot clef changeTable 7 Alors le script retourne OK\""});
#line 8
    testRunner.Given("les exigences suivantes:", ((string)(null)), table1, "Given ");
#line 11
    testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
    testRunner.Then("le besoin ESD_044 existe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table2.AddRow(new string[] {
                        "\"Changement de table\"",
                        "\"Étant donné un matériel Et la configuration définissant la table 7 Lorsque j\'app" +
                            "elle le mot clef changeTable 7 Alors le script retourne OK\""});
#line 13
        testRunner.And("Et il contient le scénario:", ((string)(null)), table2, "And ");
#line 16
        testRunner.And("Et il contient le contexte \"Soit un interpreteur de script\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction de plusieurs scénarios simples")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("core")]
        public virtual void ExtractionDePlusieursScenariosSimples()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction de plusieurs scénarios simples", new string[] {
                        "core"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "TEXTE"});
            table3.AddRow(new string[] {
                        "ESD_044",
                        @"""Contexte:Étant donné un interpréteur de script  Scénario: Changement de table Étant donné un matériel Et la configuration définissant la table 7 Lorsque j'appelle le mot clef changeTable 7 Alors le script retourne OK Scénario: Changement de table avec une table non définie Étant donné un matériel Et la configuration ne définissant pas la table 2 Lorsque j'appelle le mot clef changeTable 2 Alors j’ai la trace d’erreur numéro IDS_TCL_ERR_UNDEFINED_TABLE Et le script retourne KO"""});
#line 21
    testRunner.Given("les exigences suivantes:", ((string)(null)), table3, "Given ");
#line 24
    testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
    testRunner.Then("le besoin ESD_044 existe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table4.AddRow(new string[] {
                        "\"Changement de table\"",
                        "\"Étant donné un matériel Et la configuration définissant la table 7 Lorsque j\'app" +
                            "elle le mot clef changeTable 7 Alors le script retourne OK\""});
            table4.AddRow(new string[] {
                        "\"Changement de table avec une table non définie\"",
                        "\"Étant donné un matériel Et la configuration ne définissant pas la table 2 Lorsqu" +
                            "e j\'appelle le mot clef changeTable 2 Alors j’ai la trace d’erreur numéro IDS_TC" +
                            "L_ERR_UNDEFINED_TABLE Et le script retourne KO\""});
#line 26
        testRunner.And("Et il contient les scénario:", ((string)(null)), table4, "And ");
#line 30
        testRunner.And("Et il contient le contexte \"Soit un interpreteur de script\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FeatureExtractor.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ExtractionDesScenariosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExtractionDesScenarios.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ExtractionDesScenarios", "  In order to manipulate Requirement\'s scenarios as easily as moving shit around\r" +
                    "\n  As a bourrin developer\r\n  I want to find the context and all scenarios", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ExtractionDesScenarios")))
            {
                FeatureExtractor.Specs.Features.ExtractionDesScenariosFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction de scénario simple")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extraction")]
        public virtual void ExtractionDeScenarioSimple()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction de scénario simple", new string[] {
                        "extraction"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "TEXTE"});
            table1.AddRow(new string[] {
                        "ESD_044",
                        "Contexte: Étant donné un interpréteur de script Scénario: Changement de table Éta" +
                            "nt donné un matériel Et la configuration définissant la table 7 Lorsque j\'appell" +
                            "e le mot clef changeTable 7 Alors le script retourne OK"});
#line 8
    testRunner.Given("les exigences suivantes:", ((string)(null)), table1, "Given ");
#line 11
    testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
    testRunner.Then("le besoin ESD_044 existe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table2.AddRow(new string[] {
                        "Changement de table",
                        "Étant donné un matériel Et la configuration définissant la table 7 Lorsque j\'appe" +
                            "lle le mot clef changeTable 7 Alors le script retourne OK"});
#line 13
        testRunner.And("Et il contient le scénario:", ((string)(null)), table2, "And ");
#line 16
        testRunner.And("Et il contient le contexte \"Étant donné un interpréteur de script\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction de plusieurs scénarios simples")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extraction")]
        public virtual void ExtractionDePlusieursScenariosSimples()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction de plusieurs scénarios simples", new string[] {
                        "extraction"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "TEXTE"});
            table3.AddRow(new string[] {
                        "ESD_044",
                        @"Contexte: Étant donné un interpréteur de script Scénario: Changement de table Étant donné un matériel Et la configuration définissant la table 7 Lorsque j'appelle le mot clef changeTable 7 Alors le script retourne OK Scénario: Changement de table avec une table non définie Étant donné un matériel Et la configuration ne définissant pas la table 2 Lorsque j'appelle le mot clef changeTable 2 Alors j’ai la trace d’erreur numéro IDS_TCL_ERR_UNDEFINED_TABLE Et le script retourne KO"});
#line 21
    testRunner.Given("les exigences suivantes:", ((string)(null)), table3, "Given ");
#line 24
    testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
    testRunner.Then("le besoin ESD_044 existe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénarios"});
            table4.AddRow(new string[] {
                        "Changement de table",
                        "Étant donné un matériel Et la configuration définissant la table 7 Lorsque j\'appe" +
                            "lle le mot clef changeTable 7 Alors le script retourne OK"});
            table4.AddRow(new string[] {
                        "Changement de table avec une table non définie",
                        "Étant donné un matériel Et la configuration ne définissant pas la table 2 Lorsque" +
                            " j\'appelle le mot clef changeTable 2 Alors j’ai la trace d’erreur numéro IDS_TCL" +
                            "_ERR_UNDEFINED_TABLE Et le script retourne KO"});
#line 26
        testRunner.And("Et il contient les scénarios:", ((string)(null)), table4, "And ");
#line 30
        testRunner.And("Et il contient le contexte \"Étant donné un interpréteur de script\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction de scénarios complexes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extraction")]
        public virtual void ExtractionDeScenariosComplexes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction de scénarios complexes", new string[] {
                        "extraction"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "TEXTE"});
            table5.AddRow(new string[] {
                        "ESD_044",
                        @"Cette fonctionnalité permet de changer la valeur courante de gain. Accès à la fonctionnalité depuis un script Syntaxe changeGain valeur Spécifications exécutables Contexte: Étant donné un interpréteur de script Scénario: Changement de gain Etant donné un matériel Et la configuration définit le gain 7 Lorsque j'appelle le mot clef changeGain 7 Alors le script retourne OK Scénario: Changement de gain avec un gain non défini Etant donné un matériel Et la configuration définit pas le gain 2 Lorsque j'appelle le mot clef changeGain 2 Alors j’ai la trace d’erreur numero IDS_TCL_ERR_UNDEFINED_GAIN Et le script retourne KO Résultats attendus Met à jour le gain du mode courant. Met à jour la combo box gain de l’IHM. Le mot clef ne retourne rien à l’interpréteur. Si un problème survient alors un message d’erreur est affiché dans la fenêtre de sortie des messages standards."});
#line 34
    testRunner.Given("les exigences suivantes:", ((string)(null)), table5, "Given ");
#line 37
 testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("le besoin ESD_044 existe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénarios"});
            table6.AddRow(new string[] {
                        "Changement de gain",
                        "Etant donné un matériel Et la configuration définit le gain 7 Lorsque j\'appelle l" +
                            "e mot clef changeGain 7 Alors le script retourne OK"});
            table6.AddRow(new string[] {
                        "Changement de gain avec un gain non défini",
                        "Etant donné un matériel Et la configuration définit pas le gain 2 Lorsque j\'appel" +
                            "le le mot clef changeGain 2 Alors j’ai la trace d’erreur numero IDS_TCL_ERR_UNDE" +
                            "FINED_GAIN Et le script retourne KO"});
#line 39
        testRunner.And("Et il contient les scénarios:", ((string)(null)), table6, "And ");
#line 43
        testRunner.And("Et il contient le contexte \"Étant donné un interpréteur de script\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction d\'un plan de scénario simple sans indication de plande scénario dans l" +
            "e texte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extraction")]
        public virtual void ExtractionDUnPlanDeScenarioSimpleSansIndicationDePlandeScenarioDansLeTexte()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction d\'un plan de scénario simple sans indication de plande scénario dans l" +
                    "e texte", new string[] {
                        "extraction"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "TEXTE"});
            table7.AddRow(new string[] {
                        "ESD_046",
                        @"Contexte:     Soit un interpreteur TCL  Scénario: Définition des statuts bloquant l’acquisition     Etant donné un générateur type     Et aucun statut bloquant pour l’acquisition     Lorsque j'appelle le mot clef setAcquiBlockingXGStatus parametres     Alors les statuts st sont bloquants pour l’acquisition     Et le script retourne TCL_OK Exemples:     |  type                      | paramètres  | st          |     | Philips avec le protocole SDL  | st1Value 32 | st1Value 32 |"});
#line 48
    testRunner.Given("les exigences suivantes:", ((string)(null)), table7, "Given ");
#line 51
    testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
    testRunner.Then("le besoin ESD_046 existe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table8.AddRow(new string[] {
                        "Définition des statuts bloquant l’acquisition",
                        @"Etant donné un générateur type Et aucun statut bloquant pour l’acquisition Lorsque j'appelle le mot clef setAcquiBlockingXGStatus parametres Alors les statuts st sont bloquants pour l’acquisition Et le script retourne TCL_OK Exemples: | type | paramètres | st | | Philips avec le protocole SDL | st1Value 32 | st1Value 32 |"});
#line 53
        testRunner.And("Et il contient le scénario:", ((string)(null)), table8, "And ");
#line 56
        testRunner.And("Et il contient le contexte \"Soit un interpreteur TCL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction d\'un plan de scénario complexe sans indication de plande scénario dans" +
            " le texte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extraction")]
        public virtual void ExtractionDUnPlanDeScenarioComplexeSansIndicationDePlandeScenarioDansLeTexte()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction d\'un plan de scénario complexe sans indication de plande scénario dans" +
                    " le texte", new string[] {
                        "extraction"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "TEXTE"});
            table9.AddRow(new string[] {
                        "ESD_046",
                        @"Description La configuration maamétrer : ,    Spécifications exécutables   Scénario: Vérification du RTC Port pour un RTC soft ou hard     Etant donné le champ Active RTC defini a un type de RTC hard ou soft         Et le champ RTC Port <etat>     Lorsque je verifie la configuration RTC     Alors j’ai la boite de dialogue d’erreur IDS_ERR_RTC_PORT_CONFIG         Et TeTriS ne se lance pas Exemple:     | etat       |     | inexistant |     | vide       |    IDS_ERR_RTC_PORT_CONFIG  Erreur de configuration de TeTr"});
#line 60
    testRunner.Given("les exigences suivantes:", ((string)(null)), table9, "Given ");
#line 63
    testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
    testRunner.Then("le besoin ESD_046 existe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table10.AddRow(new string[] {
                        "Vérification du RTC Port pour un RTC soft ou hard",
                        @"Etant donné le champ Active RTC defini a un type de RTC hard ou soft Et le champ RTC Port <etat> Lorsque je verifie la configuration RTC Alors j’ai la boite de dialogue d’erreur IDS_ERR_RTC_PORT_CONFIG Et TeTriS ne se lance pas Exemple: | etat | | inexistant | | vide |"});
#line 65
        testRunner.And("Et il contient le scénario:", ((string)(null)), table10, "And ");
#line 68
        testRunner.And("Et il contient le contexte \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction sans aucun scénario")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extraction")]
        public virtual void ExtractionSansAucunScenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction sans aucun scénario", new string[] {
                        "extraction"});
#line 71
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "TEXTE"});
            table11.AddRow(new string[] {
                        "ESD_263",
                        @"Cette fonctionnalité permet de définir si l’on doit se connecter avec le générateur au démarrage de TeTriS. Accès à la fonctionnalité depuis le fichier TeTriS_Configuration.ini Conditions  Dans le fichier de configuration du profil, dans la section Hardware Enabled l’entrée Connect XGenerator définit si l’on doit se connecter. Par défaut la valeur est à yes Résultats attendus Si le mot clef n’est pas défini alors par défaut on se connecte au démarrage. Si le mot clef est défini à yes alors on se connecte au démarrage. Si le mot clef est défini à no alors on ne se connecte pas au démarrage. Il faudra par la suite se connecter manuellement au générateur ou via un mot clef de pilotage du générateur. Si le mot clef est défini à une autre valeur, alors on se connecte au démarrage."});
#line 72
    testRunner.Given("les exigences suivantes:", ((string)(null)), table11, "Given ");
#line 75
    testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
    testRunner.Then("le besoin ESD_263 n\'existe pas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction d\'un scénario complexe dont la fin est un doublon de mot")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extraction")]
        public virtual void ExtractionDUnScenarioComplexeDontLaFinEstUnDoublonDeMot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction d\'un scénario complexe dont la fin est un doublon de mot", new string[] {
                        "extraction"});
#line 79
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "TEXTE"});
            table12.AddRow(new string[] {
                        "ESD_046",
                        @"Scénario: Sauvegarde impossible lors d’une acquisition autre que contrôlée par script     Etant donné que TeTriS n’a pas pu sauvegarder d’images pour cause de mémoire insuffisante     Lorsque l’acquisition est terminee     Alors j’ai la trace de warning numero IDS_WARN_ACQUI_NO_MEM  IDS_WARN_ACQUI_NO_MEM  WARNING : toutes les"});
#line 80
    testRunner.Given("les exigences suivantes:", ((string)(null)), table12, "Given ");
#line 83
    testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
    testRunner.Then("le besoin ESD_046 existe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table13.AddRow(new string[] {
                        "Sauvegarde impossible lors d’une acquisition autre que contrôlée par script",
                        "Etant donné que TeTriS n’a pas pu sauvegarder d’images pour cause de mémoire insu" +
                            "ffisante Lorsque l’acquisition est terminee Alors j’ai la trace de warning numer" +
                            "o IDS_WARN_ACQUI_NO_MEM"});
#line 85
        testRunner.And("Et il contient le scénario:", ((string)(null)), table13, "And ");
#line 88
        testRunner.And("Et il contient le contexte \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction d\'un scénario qui commence par Lorsque au lieu de Etant donne ou soit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extraction")]
        public virtual void ExtractionDUnScenarioQuiCommenceParLorsqueAuLieuDeEtantDonneOuSoit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction d\'un scénario qui commence par Lorsque au lieu de Etant donne ou soit", new string[] {
                        "extraction"});
#line 91
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "TEXTE"});
            table14.AddRow(new string[] {
                        "ESD_044",
                        "Contexte: Étant donné un interpréteur de script Scénario: Changement de table Lor" +
                            "sque j\'appelle le mot clef changeTable 7 Alors le script retourne OK"});
#line 92
    testRunner.Given("les exigences suivantes:", ((string)(null)), table14, "Given ");
#line 95
    testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 96
    testRunner.Then("le besoin ESD_044 existe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table15.AddRow(new string[] {
                        "Changement de table",
                        "Lorsque j\'appelle le mot clef changeTable 7 Alors le script retourne OK"});
#line 97
        testRunner.And("Et il contient le scénario:", ((string)(null)), table15, "And ");
#line 100
        testRunner.And("Et il contient le contexte \"Étant donné un interpréteur de script\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extraction de scénario simple avec sa fonctionnalité")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExtractionDesScenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("extraction")]
        public virtual void ExtractionDeScenarioSimpleAvecSaFonctionnalite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extraction de scénario simple avec sa fonctionnalité", new string[] {
                        "extraction"});
#line 103
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "Fonctionnalité",
                        "TEXTE"});
            table16.AddRow(new string[] {
                        "ESD_044",
                        "Configuration des matériels hardware de l’application [p.4]",
                        "Contexte: Étant donné un interpréteur de script Scénario: Changement de table Éta" +
                            "nt donné un matériel Et la configuration définissant la table 7 Lorsque j\'appell" +
                            "e le mot clef changeTable 7 Alors le script retourne OK"});
#line 104
    testRunner.Given("l\'exigences suivantes:", ((string)(null)), table16, "Given ");
#line 107
    testRunner.When("j\'extrais les scénarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
    testRunner.Then("le besoin ESD_044 existe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "titre",
                        "scénario"});
            table17.AddRow(new string[] {
                        "Changement de table",
                        "Étant donné un matériel Et la configuration définissant la table 7 Lorsque j\'appe" +
                            "lle le mot clef changeTable 7 Alors le script retourne OK"});
#line 109
        testRunner.And("Et il contient le scénario:", ((string)(null)), table17, "And ");
#line 112
        testRunner.And("Et il contient le contexte \"Étant donné un interpréteur de script\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
  testRunner.And("sa fonctionnalité est \"Configuration des matériels hardware de l’application\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
